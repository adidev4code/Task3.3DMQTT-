Code:

#include <SPI.h>
#include <WiFiNINA.h>
#include <ArduinoMqttClient.h>

// --- WiFi & User Details ---
const char wifiSSID[] = "Alfred Nobel";
const char wifiPass[] = "CUPunjab";
const char userName[] = "Aditya";   // included in published messages

// --- MQTT Broker ---
const char broker[] = "broker.emqx.io";
int        port     = 1883;
const char patTopic[]  = "SIT210/Pat";   // separate topic for Pat
const char waveTopic[] = "SIT210/Wave";  // separate topic for Wave

// --- Pins ---
const int trigPin = 6;  // Ultrasonic Trigger
const int echoPin = 5;  // Ultrasonic Echo
const int ledPin  = 4;  // LED

// --- Thresholds ---
const int patRange  = 12; // cm
const int waveRange = 17; // cm

WiFiClient wifiClient;
MqttClient mqttClient(wifiClient);

// -----------------------------------------------------
// WiFi setup
// -----------------------------------------------------
void connectWiFi() {
  Serial.print("Connecting to WiFi ");
  Serial.println(wifiSSID);
  while (WiFi.status() != WL_CONNECTED) {
    WiFi.begin(wifiSSID, wifiPass);
    delay(5000);
    Serial.print(".");
  }
  Serial.println("\nWiFi connected");
}

// -----------------------------------------------------
// MQTT setup
// -----------------------------------------------------
void connectMQTT() {
  Serial.print("Connecting to MQTT broker...");
  while (!mqttClient.connect(broker, port)) {
    Serial.print("Error: ");
    Serial.println(mqttClient.connectError());
    delay(3000);
  }
  Serial.println("\nMQTT connected");

  mqttClient.onMessage(onMessage);

  // Subscribe to both topics
  mqttClient.subscribe(patTopic);
  mqttClient.subscribe(waveTopic);
}

// -----------------------------------------------------
// Ultrasonic distance measurement
// -----------------------------------------------------
int getDistance() {
  digitalWrite(trigPin, LOW); delayMicroseconds(2);
  digitalWrite(trigPin, HIGH); delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  long duration = pulseIn(echoPin, HIGH);
  return duration * 0.034 / 2;
}

// -----------------------------------------------------
// Publish gesture to correct topic
// -----------------------------------------------------
void publishGesture(const char* gesture, const char* topicName) {
  String msg = String(userName) + ": " + gesture;
  Serial.print("Publishing to ");
  Serial.print(topicName);
  Serial.print(": ");
  Serial.println(msg);

  mqttClient.beginMessage(topicName);
  mqttClient.print(msg);
  mqttClient.endMessage();
}

// -----------------------------------------------------
// Handle received MQTT messages
// -----------------------------------------------------
void onMessage(int size) {
  String msg;
  while (mqttClient.available()) {
    msg += (char)mqttClient.read();
  }
  Serial.print("Received: ");
  Serial.println(msg);

  if (msg.indexOf("Pat") != -1) {
    flashPat();
  } else if (msg.indexOf("Wave") != -1) {
    flashWave();
  }
}

// -----------------------------------------------------
// LED feedback patterns
// -----------------------------------------------------
void flashWave() {
  for (int i = 0; i < 3; i++) {
    digitalWrite(ledPin, HIGH); delay(150);
    digitalWrite(ledPin, LOW);  delay(150);
  }
}

void flashPat() {
  digitalWrite(ledPin, HIGH); delay(700);
  digitalWrite(ledPin, LOW);
}

// -----------------------------------------------------
// Setup
// -----------------------------------------------------
void setup() {
  Serial.begin(9600);
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  pinMode(ledPin, OUTPUT);

  connectWiFi();
  connectMQTT();
}

// -----------------------------------------------------
// Loop
// -----------------------------------------------------
void loop() {
  mqttClient.poll();

  int dist = getDistance();

  if (dist > 0 && dist < patRange) {
    publishGesture("Pat", patTopic);   // Pat goes to SIT210/Pat
    delay(2000);
  }
  else if (dist > 0 && dist < waveRange) {
    publishGesture("Wave", waveTopic); // Wave goes to SIT210/Wave
    delay(2000);
  }

  delay(100);
}
